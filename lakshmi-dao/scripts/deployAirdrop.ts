import { ethers } from "hardhat";
// import { MerkleTree } from "merkletreejs"; // Not typically needed for deployment script itself, root comes from generateMerkleTree.ts
// import keccak256 from "keccak256"; // Same as above
import fs from "fs";
import path from "path";

async function main() {
  const [deployer] = await ethers.getSigners();

  console.log("Deploying contracts with the account:", deployer.address);
  console.log("Account balance:", (await deployer.getBalance()).toString());

  // 1. Deploy LakshmiZRC20 ($LUCK token)
  // In a real scenario, you'd deploy this once or use an existing address.
  const LuckTokenFactory = await ethers.getContractFactory("LakshmiZRC20");
  const luckToken = await LuckTokenFactory.deploy(); // Add constructor arguments if any
  await luckToken.deployed();
  console.log("LakshmiZRC20 ($LUCK) token deployed to:", luckToken.address);

  // 2. Deploy Airdrop contract
  const AirdropFactory = await ethers.getContractFactory("Airdrop");
  const airdropContract = await AirdropFactory.deploy(luckToken.address);
  await airdropContract.deployed();
  console.log("Airdrop contract deployed to:", airdropContract.address);
  console.log("Airdrop contract owner (deployer):", await airdropContract.owner());

  // 3. Configure the Airdrop campaign
  // The Merkle root should be generated by running `scripts/generateMerkleTree.ts`
  // For this script, we'll use a sample root.
  // If generateMerkleTree.ts was run with its default sample data:
  // Address 1: 0x70997970C51812dc3A010C7d01b50e0d17dc79C8, Amount: 100 LUCK (100e18)
  // Address 2: 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC, Amount: 150 LUCK (150e18)
  // The generateMerkleTree.ts script would output a root for this.
  // Let's assume a placeholder root for now.
  // IMPORTANT: Replace this with the actual Merkle root from your `generateMerkleTree.ts` script output.

  // Example of how to get the root if the generateMerkleTree.ts script was run:
  let merkleRoot: string;
  const proofsFilePath = path.join(__dirname, "airdrop-proofs.json"); // Assuming generateMerkleTree.ts saves proofs
  const merkleTreeInfoPath = path.join(__dirname, "../test/merkle-test-data.json"); // Or where root is saved by script

  // For this deploy script, we'll use a pre-calculated root based on the sample data in generateMerkleTree.ts
  // Data:
  // [
  //   { address: "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", amount: "100000000000000000000" },
  //   { address: "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC", amount: "150000000000000000000" }
  // ]
  // Leaf 1: keccak256(abi.encodePacked("0x70997970C51812dc3A010C7d01b50e0d17dc79C8", 100e18))
  // Leaf 2: keccak256(abi.encodePacked("0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC", 150e18))
  // A specific root would be generated. For now, a placeholder:
  merkleRoot = "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"; // REPLACE THIS
  console.warn(`Using a placeholder Merkle Root: ${merkleRoot}. REPLACE with actual root from generateMerkleTree.ts`);

  // To make this script more robust, it should read the root from a file generated by generateMerkleTree.ts
  // For example, if generateMerkleTree.ts saves the root to 'merkleRoot.txt':
  // try {
  //   merkleRoot = fs.readFileSync(path.join(__dirname, 'merkleRoot.txt'), 'utf-8').trim();
  // } catch (e) {
  //   console.error("Failed to read Merkle root from file. Using placeholder.", e);
  //   // Use a default known root for initial test if file not found
  //    merkleRoot = "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"; // REPLACE
  // }


  const totalAirdropTokens = ethers.utils.parseUnits("250", 18); // 100 + 150 from sample data

  try {
    // Mint LUCK tokens to deployer (or ensure deployer has them)
    if (typeof (luckToken as any).mint === "function") {
      const mintTx = await (luckToken as any).connect(deployer).mint(deployer.address, totalAirdropTokens.mul(2)); // Mint extra for gas or other uses
      await mintTx.wait();
      console.log(`Minted LUCK tokens to deployer.`);
    } else {
      console.warn("LakshmiZRC20 does not have a `mint` function. Assuming deployer has LUCK tokens.");
    }

    // Approve the Airdrop contract to spend deployer's LUCK tokens (to then pull into itself)
    const approveTx = await luckToken.connect(deployer).approve(airdropContract.address, totalAirdropTokens);
    await approveTx.wait();
    console.log(`Approved Airdrop contract (${airdropContract.address}) to spend ${ethers.utils.formatUnits(totalAirdropTokens, 18)} LUCK from deployer.`);

    // Fund the Airdrop contract by calling depositAirdropFunds
    const depositTx = await airdropContract.connect(deployer).depositAirdropFunds(totalAirdropTokens);
    await depositTx.wait();
    console.log(`Deposited ${ethers.utils.formatUnits(totalAirdropTokens, 18)} LUCK into Airdrop contract.`);

    const contractLuckBalance = await luckToken.balanceOf(airdropContract.address);
    console.log(`Airdrop contract LUCK balance: ${ethers.utils.formatUnits(contractLuckBalance, 18)}`);

    // Create the airdrop campaign
    console.log(`Creating airdrop with Merkle Root: ${merkleRoot} and Total Tokens: ${ethers.utils.formatUnits(totalAirdropTokens, 18)}`);
    const createAirdropTx = await airdropContract.connect(deployer).createAirdrop(merkleRoot, totalAirdropTokens);
    await createAirdropTx.wait();
    console.log("Airdrop campaign created successfully.");

    const airdropDetails = await airdropContract.getAirdropDetails();
    console.log("Airdrop Details from contract:");
    console.log("  Merkle Root:", airdropDetails.merkleRoot);
    console.log("  Total Tokens:", ethers.utils.formatUnits(airdropDetails.totalTokens, 18));
    console.log("  Claimed Tokens:", ethers.utils.formatUnits(airdropDetails.claimedTokens, 18));
    console.log("  Is Active:", airdropDetails.isActive);

  } catch (error: any) {
     if (error.message.includes("is not a function") || error.message.includes("no matching function")) {
        console.warn(`Warning: Function missing in LakshmiZRC20 (e.g., mint) or Airdrop contract, or deployer is not authorized. Details: ${error.message}`);
    } else {
        console.error("Error during Airdrop contract setup:", error);
    }
    console.log("Manual setup of Airdrop contract might be required.");
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

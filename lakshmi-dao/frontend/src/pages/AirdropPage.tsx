import React, { useState, useEffect } from 'react';
// import { useAccount, useContractRead, useContractWrite, usePrepareContractWrite } from 'wagmi';
// import { airdropContractAbi, airdropContractAddress } from '../constants/contracts'; // Define these
// import { ethers } from 'ethers';
// import { MerkleTree } from 'merkletreejs'; // For client-side proof generation (advanced)
// import keccak256 from 'keccak256'; // For client-side proof generation (advanced)
// import { useAppContext } from '../contexts/AppContext';


interface AirdropDetails {
  merkleRoot: string;
  totalTokens: string;
  claimedTokens: string;
  isActive: boolean;
}

// This would typically come from a backend or a local file generated by generateMerkleTree.ts
// For frontend generation, the user would need to know their raw allocation amount.
// interface UserAirdropAllocation {
// address: string;
// amount: string; // e.g., "100000000000000000000"
// proof: string[];
// }

const AirdropPage: React.FC = () => {
  const [airdropDetails, setAirdropDetails] = useState<AirdropDetails | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [userAmount, setUserAmount] = useState('');
  const [userProof, setUserProof] = useState(''); // User will paste comma-separated proof strings

  // const { address: userAddress, isConnected } = useAccount();
  // const { isWalletConnected } = useAppContext(); // Or use isConnected from useAccount

  // --- Fetch Airdrop Details ---
  // const { data: contractAirdropDetails, isLoading: isLoadingDetails } = useContractRead({
  //   address: airdropContractAddress,
  //   abi: airdropContractAbi,
  //   functionName: 'getAirdropDetails',
  //   watch: true,
  // });

  // const { data: hasClaimedData, isLoading: isLoadingHasClaimed } = useContractRead({
  //   address: airdropContractAddress,
  //   abi: airdropContractAbi,
  //   functionName: 'hasClaimed',
  //   args: [userAddress],
  //   enabled: !!userAddress,
  //   watch: true,
  // });


  // Mock data loading effect
  useEffect(() => {
    setIsLoading(true);
    setTimeout(() => {
      setAirdropDetails({
        merkleRoot: "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890", // Example
        totalTokens: "100000.00 LUCK",
        claimedTokens: "25000.00 LUCK",
        isActive: true,
      });
      setIsLoading(false);
    }, 1000);

    // Real data fetching:
    // if (contractAirdropDetails) {
    //   setAirdropDetails({
    //     merkleRoot: contractAirdropDetails.merkleRoot,
    //     totalTokens: ethers.utils.formatUnits(contractAirdropDetails.totalTokens, 18),
    //     claimedTokens: ethers.utils.formatUnits(contractAirdropDetails.claimedTokens, 18),
    //     isActive: contractAirdropDetails.isActive,
    //   });
    //   setIsLoading(false);
    //   setError(null);
    // } else if (isLoadingDetails) {
    //   setIsLoading(true);
    // } else {
    //   // setError("Could not load airdrop details.");
    //   // setIsLoading(false);
    // }
  }, []); // Dependencies: [contractAirdropDetails, isLoadingDetails]


  const handleClaimAirdrop = async () => {
    if (!userAddress) {
        alert("Please connect your wallet.");
        return;
    }
    if (!userAmount || parseFloat(userAmount) <= 0) {
      alert("Please enter your allocated amount.");
      return;
    }
    if (!userProof.trim()) {
      alert("Please provide your Merkle proof.");
      return;
    }

    const proofArray = userProof.split(',').map(p => p.trim()).filter(p => p.startsWith('0x'));
    if (proofArray.length === 0 && userProof.trim() !== '') { // if it's not empty but contains no valid hex
        alert("Merkle proof should be a comma-separated list of 0x-prefixed hex strings.");
        return;
    }

    console.log(`Claiming ${userAmount} LUCK for ${userAddress} with proof:`, proofArray);

    // const amountInWei = ethers.utils.parseUnits(userAmount, 18);
    // const { config } = usePrepareContractWrite({
    //   address: airdropContractAddress,
    //   abi: airdropContractAbi,
    //   functionName: 'claimAirdrop',
    //   args: [proofArray, amountInWei],
    // });
    // const { write, isLoading: isClaiming, isSuccess, error: claimError } = useContractWrite(config);
    // write?.();
    alert(`Frontend: Claim Airdrop for ${userAmount} LUCK (contract call placeholder)`);
  };

  // Placeholder for userAddress for the alert to work if useAccount is commented out
  const userAddress = "0xYourConnectedAddress";


  if (isLoading) {
    return <div className="text-center py-10">Loading airdrop information...</div>;
  }

  if (error || !airdropDetails) {
    return <div className="text-center py-10 text-red-500">{error || "Could not load airdrop details."}</div>;
  }

  if (!airdropDetails.isActive) {
    return (
      <div className="container mx-auto px-4 py-12 text-center">
        <h1 className="text-4xl font-bold text-gray-700 mb-6">Airdrop Campaign</h1>
        <p className="text-xl text-gray-500">There is no active airdrop campaign at the moment. Please check back later!</p>
        <p className="text-sm text-gray-400 mt-4">Merkle Root (Last): {airdropDetails.merkleRoot}</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-12">
      <header className="text-center mb-12">
        <h1 className="text-5xl font-bold text-orange-500">Claim Your LUCK Airdrop!</h1>
        <p className="text-xl text-gray-600 mt-2">
          Eligible users can claim their $LUCK tokens from the current airdrop campaign.
        </p>
      </header>

      <div className="bg-white p-8 rounded-lg shadow-xl mb-10">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">Airdrop Campaign Details</h2>
        <div className="grid md:grid-cols-2 gap-x-8 gap-y-2 text-gray-700">
          <p><strong>Status:</strong> <span className="text-green-500 font-semibold">Active</span></p>
          <p><strong>Total Tokens in Airdrop:</strong> {airdropDetails.totalTokens}</p>
          <p><strong>Merkle Root:</strong> <code className="text-sm break-all">{airdropDetails.merkleRoot}</code></p>
          <p><strong>Tokens Claimed So Far:</strong> {airdropDetails.claimedTokens}</p>
        </div>
      </div>

      {/* Claiming Section - Assuming user has their proof and amount */}
      <div className="bg-gray-50 p-8 rounded-lg shadow-xl">
        <h2 className="text-2xl font-semibold text-gray-800 mb-6">Claim Your Tokens</h2>
        {/* Real eligibility check would involve checking userAddress against a list or using hasClaimed */}
        {/* {hasClaimedData && <p className="text-green-600 font-semibold mb-4">You have already claimed your airdrop!</p>} */}
        {/* {!hasClaimedData && ( */}
        <>
          <p className="text-gray-700 mb-4">
            To claim your tokens, you need your allocated amount and your personal Merkle proof.
            This proof is typically provided by the airdrop organizers or a trusted community source.
          </p>
          <div className="mb-4">
            <label htmlFor="airdropAmount" className="block text-sm font-medium text-gray-700 mb-1">
              Your Allocated Amount (in LUCK, e.g., 100.5)
            </label>
            <input
              type="text" // Use text to allow decimals before parsing
              id="airdropAmount"
              value={userAmount}
              onChange={(e) => setUserAmount(e.target.value)}
              placeholder="e.g., 100"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-orange-500 focus:border-orange-500"
            />
          </div>
          <div className="mb-6">
            <label htmlFor="merkleProof" className="block text-sm font-medium text-gray-700 mb-1">
              Your Merkle Proof (comma-separated 0x... strings)
            </label>
            <textarea
              id="merkleProof"
              rows={3}
              value={userProof}
              onChange={(e) => setUserProof(e.target.value)}
              placeholder="0x..., 0x..., ..."
              className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-orange-500 focus:border-orange-500"
            />
          </div>
          <button
            onClick={handleClaimAirdrop}
            // disabled={!isWalletConnected || isLoadingDetails || isLoadingHasClaimed || hasClaimedData}
            className="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-3 px-6 rounded-lg text-lg transition-colors disabled:opacity-50"
          >
            Claim Airdrop
          </button>
        </>
        {/* )} */}
      </div>
       <p className="text-center text-gray-500 mt-8 text-sm">
        Ensure your Merkle proof and amount are correct. Incorrect information will result in a failed transaction.
        The Merkle proof is sensitive and specific to your address and amount.
      </p>
    </div>
  );
};

export default AirdropPage;
